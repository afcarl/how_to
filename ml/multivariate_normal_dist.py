'''Multivariate gaussian distribution
'''
import numpy as np


# Using Scipy
from scipy.stats import multivariate_normal
x = np.linspace(0, 5, 10, endpoint=False)
y = multivariate_normal.pdf([0,0], mean=[0.0, 0.0], cov=[[1.0, 0.0], [0.0, 1.0]]);
print y


from scipy.stats import multivariate_normal
x = np.linspace(0, 5, 10, endpoint=False)
y = multivariate_normal.pdf([1.,1.,1.], mean=[0.0, 0.0, 0.0], cov=[[1.0, 0.0, 0.0], [0.0, 1.0, 0.0] ,[0.0, 0.0, 1.0]]);
print y


# Implement prability density function (pdf) of a 2D gaussian distribution
def pdf_2d_gaussian(x, mu, sigma):
  """
  Args:
    x: 2d point
    mu: 2d mean of the gaussian
    sigma 2x2 cov of the gaussian
  Returns:
      probabilty of x generated by the gaussian
  """
  return 1.0/(2*np.pi*np.sqrt(np.linalg.det(sigma)))*np.exp(-0.5*(x-mu).dot(np.linalg.pinv(sigma)).dot((x-mu).T))

print pdf_2d_gaussian(np.matrix([0.0, 0.0]), np.matrix([0.0, 0.0]), np.matrix([[1.0,0.0],[0.0,1.0]]))
print pdf_2d_gaussian(np.array([0.0, 0.0]), np.array([0.0, 0.0]), np.array([[1.0,0.0],[0.0,1.0]]))

# Implement pdf of a multivariate gaussian distribution
def pdf_multivariate_gaussian(x, mu, sigma):
  """
  Args:
    x:      n-d point
    mu:     n-d mean of the gaussian
    sigma:  n by n covariance of the gaussian
  ReturnsL
    probabilty of x generated by the gaussian
  """
  n = np.sum(np.shape(x))
  return 1./(np.sqrt( (2*np.pi)**n * np.linalg.det(sigma) )) * np.exp( -0.5 * (x-mu).dot(np.linalg.pinv(sigma)).dot((x-mu).T) )

print pdf_multivariate_gaussian(np.array([1.,1.,1.]), np.array([0.0, 0.0, 0.0]), np.array([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0] ,[0.0, 0.0, 1.0]]))

